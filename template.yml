Description: An example CloudFormation template for Fargate.

Parameters:
  MicroServiceName:
    Description: Nome do micro servico
    Type:  String
    Default: 'digimonapi'
  FeatureName:
    Description: Nome da feature
    Type:  String
    Default: 'springboot'
  ContainerName: 
    Description: Container Name
    Type: String
    Default: 'digimon'
  ServiceName:
    Type: String
    Default: DigimonService 
  EcsClusterName:
    Type: String
    Default: 'digimon-cluster'
  Image:
    Type: String
    Default: 416068129208.dkr.ecr.us-east-1.amazonaws.com/digimonapi:latest
  ContainerCpu:
    Description: The number of cpu units reserved for the container.
    Type: Number
    Default: 256
  ContainerMemory:
    Description: The amount (in MiB) of memory to present to the container.
    Type: Number
    Default: 512
  ContainerMemoryReservation:
    Description: The soft limit (in MiB) of memory to reserve for the container.
    Type: Number
    Default: 512
  MinNumberOfTasks:
    Description: Minimum number of tasks to launch for the service
    Type: Number
    Default: 1
    MinValue: 0
  MaxNumberOfTasks:
    Description: Maximum number of tasks to launch for the service
    Type: Number
    Default: 2
    MinValue: 0 
  VPCID:
    Description: ID da VPC
    Type:  AWS::EC2::VPC::Id
  VPCCIDR:
    Description: CIDR da VPC para configuracao do SG dos servicos
    Type:  String
    Default: '0.0.0.0/0'
    AllowedPattern: '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$'
  PrivateSubnets:
    Type:  List<AWS::EC2::Subnet::Id>    
  SecurityGroupDefault: 
    Description: 'Securtity Group Default da Conta'
    Type: AWS::EC2::SecurityGroup::Id
  ContainerPort:
    Type: Number
    Default: 80
  LoadBalancerPort:
    Type: Number
    Default: 80
  HealthCheckPath:
    Type: String
    Default: /actuator/health
  # for autoscaling
  MinContainers:
    Type: Number
    Default: 2
  # for autoscaling
  MaxContainers:
    Type: Number
    Default: 5
  # target CPU utilization (%)
  AutoScalingTargetValue:
    Type: Number
    Default: 90
  ListenerContainerPort:
    Description: Listening port for container
    Type: Number
    Default: 80

Resources:
  CloudWatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${FeatureName}-${MicroServiceName}"
      RetentionInDays: 7

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref EcsClusterName
      CapacityProviders:
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    # Makes sure the log group is created before it is used.
    DependsOn: CloudWatchLogGroup
    Properties:
      ContainerDefinitions:
        - Name: !Sub ${ContainerName}
          Image: !Sub ${Image}
          PortMappings:
            - ContainerPort: !Ref ListenerContainerPort
          Cpu: !Ref ContainerCpu
          Memory: !Ref ContainerMemory
          MemoryReservation: !Ref ContainerMemoryReservation
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Sub "${AWS::Region}"
              awslogs-group: !Sub "${FeatureName}-${MicroServiceName}"
              awslogs-stream-prefix: !Sub "${FeatureName}-${MicroServiceName}"
      NetworkMode: awsvpc
      Memory: !Ref ContainerMemoryReservation
      Cpu: !Ref ContainerCpu
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref TaskExecutionRole
      RequiresCompatibilities:
        - "FARGATE"
    

  ## For Fargate
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: !Sub "${FeatureName}-${MicroServiceName}-AmazonECSTaskExecutionRolePolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # Allow the ECS Tasks to download images from ECR
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  # Allow the ECS tasks to upload logs to CloudWatch
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogStreams'
                Resource: '*'
        - PolicyName: !Sub "${FeatureName}-${MicroServiceName}-ECS"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:DiscoverPollEndpoint'
                  - 'ecs:RegisterContainerInstance'
                  - 'ecs:SubmitContainerStateChange'
                  - 'ecs:SubmitTaskStateChange'
                  - 'ecs:ListContainerInstances'
                  - 'ecs:Poll'
                  - 'ecs:StartTelemetrySession'
                  - 'ecs:UpdateContainerInstancesState'
                  - 'ecs:ListTasks'
                  - 'ecs:DescribeContainerInstances'
                Resource: '*'
        - PolicyName: !Sub '${FeatureName}-${MicroServiceName}-cloudwatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub '${AWS::StackName}'
      GroupDescription: 'nlb-digimon-api'
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          Description: 'Conexao com o NLB'
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCIDR
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: 'Saida para todas as portas'
          IpProtocol: "-1"
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}'


#========================================================
  Service:
    DependsOn: Listener
    Type: "AWS::ECS::Service"
    Properties:
      ServiceName: !Sub service-${FeatureName}-${MicroServiceName}
      Cluster: !Ref EcsClusterName
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 10
      LaunchType: FARGATE
      PlatformVersion: '1.4.0'
      LoadBalancers:
        - ContainerName: !Sub ${ContainerName}
          ContainerPort: !Ref ListenerContainerPort
          TargetGroupArn: !Ref TargetGroup
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref TaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroupDefault
            - !Ref SecurityGroup
          Subnets: !Ref PrivateSubnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: !Ref ListenerContainerPort
      Protocol: TCP
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: '/actuator/health'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200-399'
      VpcId: !Ref VPCID
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '5'
      TargetType: ip

  DigimonAPIVpcLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Description: "VpcLink Validacao Limite"
      Name: !Sub "${MicroServiceName}-vpc-link"
      TargetArns:
        - !Ref LoadBalancer

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref ListenerContainerPort
      Protocol: TCP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'nlb-${MicroServiceName}'
      Type: network
      Scheme: internal
      LoadBalancerAttributes:
        - Key: 'load_balancing.cross_zone.enabled'
          Value: 'false'
      Subnets: !Ref PrivateSubnets
      Tags:
        - Key: LoadBalancerType
          Value: VPCLink

  ScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action: ["sts:AssumeRole"]
      Policies:
        - PolicyName: adjust-service-desired-count
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ecs:UpdateService
                Resource: !Ref Service

  ScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MinCapacity: !Ref MinNumberOfTasks
      MaxCapacity: !Ref MaxNumberOfTasks
      ResourceId: !Join
        - "/"
        - - service
          - !Ref EcsClusterName
          - !GetAtt Service.Name
      RoleARN: !GetAtt ScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: ScaleWithCpu
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
       # Keep things at or lower than 70% CPU utilization, for example
        TargetValue: 70
        ScaleInCooldown: 120
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
